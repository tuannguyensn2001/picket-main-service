// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: answer_sheet.proto

package answersheetpb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Test struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64                  `protobuf:"varint,11,opt,name=id,proto3" json:"id,omitempty"`
	Name               string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TimeToDo           int32                  `protobuf:"varint,2,opt,name=time_to_do,json=timeToDo,proto3" json:"time_to_do,omitempty"`
	TimeStart          *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time_start,json=timeStart,proto3" json:"time_start,omitempty"`
	TimeEnd            *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time_end,json=timeEnd,proto3" json:"time_end,omitempty"`
	DoOnce             bool                   `protobuf:"varint,5,opt,name=do_once,json=doOnce,proto3" json:"do_once,omitempty"`
	Password           string                 `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	PreventCheat       uint32                 `protobuf:"varint,7,opt,name=prevent_cheat,json=preventCheat,proto3" json:"prevent_cheat,omitempty"`
	IsAuthenticateUser bool                   `protobuf:"varint,8,opt,name=is_authenticate_user,json=isAuthenticateUser,proto3" json:"is_authenticate_user,omitempty"`
	ShowMark           uint32                 `protobuf:"varint,9,opt,name=show_mark,json=showMark,proto3" json:"show_mark,omitempty"`
	ShowAnswer         uint32                 `protobuf:"varint,10,opt,name=show_answer,json=showAnswer,proto3" json:"show_answer,omitempty"`
	CreatedBy          int64                  `protobuf:"varint,12,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Test) Reset() {
	*x = Test{}
	if protoimpl.UnsafeEnabled {
		mi := &file_answer_sheet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test) ProtoMessage() {}

func (x *Test) ProtoReflect() protoreflect.Message {
	mi := &file_answer_sheet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test.ProtoReflect.Descriptor instead.
func (*Test) Descriptor() ([]byte, []int) {
	return file_answer_sheet_proto_rawDescGZIP(), []int{0}
}

func (x *Test) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Test) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Test) GetTimeToDo() int32 {
	if x != nil {
		return x.TimeToDo
	}
	return 0
}

func (x *Test) GetTimeStart() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeStart
	}
	return nil
}

func (x *Test) GetTimeEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

func (x *Test) GetDoOnce() bool {
	if x != nil {
		return x.DoOnce
	}
	return false
}

func (x *Test) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Test) GetPreventCheat() uint32 {
	if x != nil {
		return x.PreventCheat
	}
	return 0
}

func (x *Test) GetIsAuthenticateUser() bool {
	if x != nil {
		return x.IsAuthenticateUser
	}
	return false
}

func (x *Test) GetShowMark() uint32 {
	if x != nil {
		return x.ShowMark
	}
	return 0
}

func (x *Test) GetShowAnswer() uint32 {
	if x != nil {
		return x.ShowAnswer
	}
	return 0
}

func (x *Test) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *Test) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Test) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type StartDoTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestId  int64  `protobuf:"varint,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *StartDoTestRequest) Reset() {
	*x = StartDoTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_answer_sheet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartDoTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartDoTestRequest) ProtoMessage() {}

func (x *StartDoTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_answer_sheet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartDoTestRequest.ProtoReflect.Descriptor instead.
func (*StartDoTestRequest) Descriptor() ([]byte, []int) {
	return file_answer_sheet_proto_rawDescGZIP(), []int{1}
}

func (x *StartDoTestRequest) GetTestId() int64 {
	if x != nil {
		return x.TestId
	}
	return 0
}

func (x *StartDoTestRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type StartDoTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StartDoTestResponse) Reset() {
	*x = StartDoTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_answer_sheet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartDoTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartDoTestResponse) ProtoMessage() {}

func (x *StartDoTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_answer_sheet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartDoTestResponse.ProtoReflect.Descriptor instead.
func (*StartDoTestResponse) Descriptor() ([]byte, []int) {
	return file_answer_sheet_proto_rawDescGZIP(), []int{2}
}

func (x *StartDoTestResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CheckUserDoingTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TestId int64 `protobuf:"varint,2,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
}

func (x *CheckUserDoingTestRequest) Reset() {
	*x = CheckUserDoingTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_answer_sheet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserDoingTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserDoingTestRequest) ProtoMessage() {}

func (x *CheckUserDoingTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_answer_sheet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserDoingTestRequest.ProtoReflect.Descriptor instead.
func (*CheckUserDoingTestRequest) Descriptor() ([]byte, []int) {
	return file_answer_sheet_proto_rawDescGZIP(), []int{3}
}

func (x *CheckUserDoingTestRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CheckUserDoingTestRequest) GetTestId() int64 {
	if x != nil {
		return x.TestId
	}
	return 0
}

type CheckUserDoingTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Check   bool   `protobuf:"varint,1,opt,name=check,proto3" json:"check,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CheckUserDoingTestResponse) Reset() {
	*x = CheckUserDoingTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_answer_sheet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserDoingTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserDoingTestResponse) ProtoMessage() {}

func (x *CheckUserDoingTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_answer_sheet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserDoingTestResponse.ProtoReflect.Descriptor instead.
func (*CheckUserDoingTestResponse) Descriptor() ([]byte, []int) {
	return file_answer_sheet_proto_rawDescGZIP(), []int{4}
}

func (x *CheckUserDoingTestResponse) GetCheck() bool {
	if x != nil {
		return x.Check
	}
	return false
}

func (x *CheckUserDoingTestResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UserAnswerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestId         int64  `protobuf:"varint,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	QuestionId     int64  `protobuf:"varint,2,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	Answer         string `protobuf:"bytes,3,opt,name=answer,proto3" json:"answer,omitempty"`
	PreviousAnswer string `protobuf:"bytes,4,opt,name=previous_answer,json=previousAnswer,proto3" json:"previous_answer,omitempty"`
}

func (x *UserAnswerRequest) Reset() {
	*x = UserAnswerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_answer_sheet_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAnswerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAnswerRequest) ProtoMessage() {}

func (x *UserAnswerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_answer_sheet_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAnswerRequest.ProtoReflect.Descriptor instead.
func (*UserAnswerRequest) Descriptor() ([]byte, []int) {
	return file_answer_sheet_proto_rawDescGZIP(), []int{5}
}

func (x *UserAnswerRequest) GetTestId() int64 {
	if x != nil {
		return x.TestId
	}
	return 0
}

func (x *UserAnswerRequest) GetQuestionId() int64 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

func (x *UserAnswerRequest) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *UserAnswerRequest) GetPreviousAnswer() string {
	if x != nil {
		return x.PreviousAnswer
	}
	return ""
}

type UserAnswerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UserAnswerResponse) Reset() {
	*x = UserAnswerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_answer_sheet_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAnswerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAnswerResponse) ProtoMessage() {}

func (x *UserAnswerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_answer_sheet_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAnswerResponse.ProtoReflect.Descriptor instead.
func (*UserAnswerResponse) Descriptor() ([]byte, []int) {
	return file_answer_sheet_proto_rawDescGZIP(), []int{6}
}

func (x *UserAnswerResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetTestContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestId int64 `protobuf:"varint,1,opt,name=testId,proto3" json:"testId,omitempty"`
}

func (x *GetTestContentRequest) Reset() {
	*x = GetTestContentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_answer_sheet_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestContentRequest) ProtoMessage() {}

func (x *GetTestContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_answer_sheet_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestContentRequest.ProtoReflect.Descriptor instead.
func (*GetTestContentRequest) Descriptor() ([]byte, []int) {
	return file_answer_sheet_proto_rawDescGZIP(), []int{7}
}

func (x *GetTestContentRequest) GetTestId() int64 {
	if x != nil {
		return x.TestId
	}
	return 0
}

type GetTestContentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string       `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Data    *TestContent `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetTestContentResponse) Reset() {
	*x = GetTestContentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_answer_sheet_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestContentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestContentResponse) ProtoMessage() {}

func (x *GetTestContentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_answer_sheet_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestContentResponse.ProtoReflect.Descriptor instead.
func (*GetTestContentResponse) Descriptor() ([]byte, []int) {
	return file_answer_sheet_proto_rawDescGZIP(), []int{8}
}

func (x *GetTestContentResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetTestContentResponse) GetData() *TestContent {
	if x != nil {
		return x.Data
	}
	return nil
}

type TestMultipleChoiceAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TestMultipleChoiceId int64   `protobuf:"varint,2,opt,name=test_multiple_choice_id,json=testMultipleChoiceId,proto3" json:"test_multiple_choice_id,omitempty"`
	Score                float32 `protobuf:"fixed32,3,opt,name=score,proto3" json:"score,omitempty"`
	Type                 int32   `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *TestMultipleChoiceAnswer) Reset() {
	*x = TestMultipleChoiceAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_answer_sheet_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMultipleChoiceAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMultipleChoiceAnswer) ProtoMessage() {}

func (x *TestMultipleChoiceAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_answer_sheet_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMultipleChoiceAnswer.ProtoReflect.Descriptor instead.
func (*TestMultipleChoiceAnswer) Descriptor() ([]byte, []int) {
	return file_answer_sheet_proto_rawDescGZIP(), []int{9}
}

func (x *TestMultipleChoiceAnswer) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TestMultipleChoiceAnswer) GetTestMultipleChoiceId() int64 {
	if x != nil {
		return x.TestMultipleChoiceId
	}
	return 0
}

func (x *TestMultipleChoiceAnswer) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *TestMultipleChoiceAnswer) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type TestMultipleChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FilePath string                      `protobuf:"bytes,2,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	Score    float32                     `protobuf:"fixed32,3,opt,name=score,proto3" json:"score,omitempty"`
	Answers  []*TestMultipleChoiceAnswer `protobuf:"bytes,4,rep,name=answers,proto3" json:"answers,omitempty"`
}

func (x *TestMultipleChoice) Reset() {
	*x = TestMultipleChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_answer_sheet_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMultipleChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMultipleChoice) ProtoMessage() {}

func (x *TestMultipleChoice) ProtoReflect() protoreflect.Message {
	mi := &file_answer_sheet_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMultipleChoice.ProtoReflect.Descriptor instead.
func (*TestMultipleChoice) Descriptor() ([]byte, []int) {
	return file_answer_sheet_proto_rawDescGZIP(), []int{10}
}

func (x *TestMultipleChoice) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TestMultipleChoice) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *TestMultipleChoice) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *TestMultipleChoice) GetAnswers() []*TestMultipleChoiceAnswer {
	if x != nil {
		return x.Answers
	}
	return nil
}

type TestContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TestId         int64                `protobuf:"varint,2,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	TypeableId     int64                `protobuf:"varint,3,opt,name=typeable_id,json=typeableId,proto3" json:"typeable_id,omitempty"`
	Typeable       int64                `protobuf:"varint,4,opt,name=typeable,proto3" json:"typeable,omitempty"`
	MultipleChoice *TestMultipleChoice  `protobuf:"bytes,5,opt,name=multiple_choice,json=multipleChoice,proto3" json:"multiple_choice,omitempty"`
	TimeLeft       *durationpb.Duration `protobuf:"bytes,6,opt,name=time_left,json=timeLeft,proto3" json:"time_left,omitempty"`
}

func (x *TestContent) Reset() {
	*x = TestContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_answer_sheet_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestContent) ProtoMessage() {}

func (x *TestContent) ProtoReflect() protoreflect.Message {
	mi := &file_answer_sheet_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestContent.ProtoReflect.Descriptor instead.
func (*TestContent) Descriptor() ([]byte, []int) {
	return file_answer_sheet_proto_rawDescGZIP(), []int{11}
}

func (x *TestContent) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TestContent) GetTestId() int64 {
	if x != nil {
		return x.TestId
	}
	return 0
}

func (x *TestContent) GetTypeableId() int64 {
	if x != nil {
		return x.TypeableId
	}
	return 0
}

func (x *TestContent) GetTypeable() int64 {
	if x != nil {
		return x.Typeable
	}
	return 0
}

func (x *TestContent) GetMultipleChoice() *TestMultipleChoice {
	if x != nil {
		return x.MultipleChoice
	}
	return nil
}

func (x *TestContent) GetTimeLeft() *durationpb.Duration {
	if x != nil {
		return x.TimeLeft
	}
	return nil
}

type GetLatestStartTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestId int64 `protobuf:"varint,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	UserId int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetLatestStartTimeRequest) Reset() {
	*x = GetLatestStartTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_answer_sheet_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestStartTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestStartTimeRequest) ProtoMessage() {}

func (x *GetLatestStartTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_answer_sheet_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestStartTimeRequest.ProtoReflect.Descriptor instead.
func (*GetLatestStartTimeRequest) Descriptor() ([]byte, []int) {
	return file_answer_sheet_proto_rawDescGZIP(), []int{12}
}

func (x *GetLatestStartTimeRequest) GetTestId() int64 {
	if x != nil {
		return x.TestId
	}
	return 0
}

func (x *GetLatestStartTimeRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetLatestStartTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Data    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetLatestStartTimeResponse) Reset() {
	*x = GetLatestStartTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_answer_sheet_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestStartTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestStartTimeResponse) ProtoMessage() {}

func (x *GetLatestStartTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_answer_sheet_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestStartTimeResponse.ProtoReflect.Descriptor instead.
func (*GetLatestStartTimeResponse) Descriptor() ([]byte, []int) {
	return file_answer_sheet_proto_rawDescGZIP(), []int{13}
}

func (x *GetLatestStartTimeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetLatestStartTimeResponse) GetData() *timestamppb.Timestamp {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetCurrentTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TestId int64 `protobuf:"varint,2,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
}

func (x *GetCurrentTestRequest) Reset() {
	*x = GetCurrentTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_answer_sheet_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentTestRequest) ProtoMessage() {}

func (x *GetCurrentTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_answer_sheet_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentTestRequest.ProtoReflect.Descriptor instead.
func (*GetCurrentTestRequest) Descriptor() ([]byte, []int) {
	return file_answer_sheet_proto_rawDescGZIP(), []int{14}
}

func (x *GetCurrentTestRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetCurrentTestRequest) GetTestId() int64 {
	if x != nil {
		return x.TestId
	}
	return 0
}

type Answer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionId int64  `protobuf:"varint,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	Answer     string `protobuf:"bytes,2,opt,name=answer,proto3" json:"answer,omitempty"`
}

func (x *Answer) Reset() {
	*x = Answer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_answer_sheet_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Answer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Answer) ProtoMessage() {}

func (x *Answer) ProtoReflect() protoreflect.Message {
	mi := &file_answer_sheet_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Answer.ProtoReflect.Descriptor instead.
func (*Answer) Descriptor() ([]byte, []int) {
	return file_answer_sheet_proto_rawDescGZIP(), []int{15}
}

func (x *Answer) GetQuestionId() int64 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

func (x *Answer) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

type GetCurrentTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string    `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*Answer `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetCurrentTestResponse) Reset() {
	*x = GetCurrentTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_answer_sheet_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentTestResponse) ProtoMessage() {}

func (x *GetCurrentTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_answer_sheet_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentTestResponse.ProtoReflect.Descriptor instead.
func (*GetCurrentTestResponse) Descriptor() ([]byte, []int) {
	return file_answer_sheet_proto_rawDescGZIP(), []int{16}
}

func (x *GetCurrentTestResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetCurrentTestResponse) GetData() []*Answer {
	if x != nil {
		return x.Data
	}
	return nil
}

type SubmitTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TestId int64 `protobuf:"varint,2,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
}

func (x *SubmitTestRequest) Reset() {
	*x = SubmitTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_answer_sheet_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTestRequest) ProtoMessage() {}

func (x *SubmitTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_answer_sheet_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTestRequest.ProtoReflect.Descriptor instead.
func (*SubmitTestRequest) Descriptor() ([]byte, []int) {
	return file_answer_sheet_proto_rawDescGZIP(), []int{17}
}

func (x *SubmitTestRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SubmitTestRequest) GetTestId() int64 {
	if x != nil {
		return x.TestId
	}
	return 0
}

type SubmitTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SubmitTestResponse) Reset() {
	*x = SubmitTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_answer_sheet_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTestResponse) ProtoMessage() {}

func (x *SubmitTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_answer_sheet_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTestResponse.ProtoReflect.Descriptor instead.
func (*SubmitTestResponse) Descriptor() ([]byte, []int) {
	return file_answer_sheet_proto_rawDescGZIP(), []int{18}
}

func (x *SubmitTestResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CheckUserSubmittedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestId int64 `protobuf:"varint,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	UserId int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *CheckUserSubmittedRequest) Reset() {
	*x = CheckUserSubmittedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_answer_sheet_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserSubmittedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserSubmittedRequest) ProtoMessage() {}

func (x *CheckUserSubmittedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_answer_sheet_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserSubmittedRequest.ProtoReflect.Descriptor instead.
func (*CheckUserSubmittedRequest) Descriptor() ([]byte, []int) {
	return file_answer_sheet_proto_rawDescGZIP(), []int{19}
}

func (x *CheckUserSubmittedRequest) GetTestId() int64 {
	if x != nil {
		return x.TestId
	}
	return 0
}

func (x *CheckUserSubmittedRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type CheckUserSubmittedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data bool `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CheckUserSubmittedResponse) Reset() {
	*x = CheckUserSubmittedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_answer_sheet_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserSubmittedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserSubmittedResponse) ProtoMessage() {}

func (x *CheckUserSubmittedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_answer_sheet_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserSubmittedResponse.ProtoReflect.Descriptor instead.
func (*CheckUserSubmittedResponse) Descriptor() ([]byte, []int) {
	return file_answer_sheet_proto_rawDescGZIP(), []int{20}
}

func (x *CheckUserSubmittedResponse) GetData() bool {
	if x != nil {
		return x.Data
	}
	return false
}

var File_answer_sheet_proto protoreflect.FileDescriptor

var file_answer_sheet_proto_rawDesc = []byte{
	0x0a, 0x12, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x65, 0x65, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x65,
	0x65, 0x74, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x99, 0x04, 0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x44, 0x6f, 0x12, 0x39, 0x0a, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x64, 0x6f, 0x5f, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x64, 0x6f, 0x4f, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x68, 0x65, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x61, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73,
	0x68, 0x6f, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x68,
	0x6f, 0x77, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x47, 0x0a,
	0x12, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2f, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x6f, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4d, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x1a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x2e, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x5f, 0x73, 0x68, 0x65, 0x65, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8b, 0x01, 0x0a, 0x18, 0x54, 0x65,
	0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x40, 0x0a, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x65, 0x65,
	0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x73, 0x22, 0xf6, 0x01, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x79, 0x70, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x65, 0x65,
	0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x52, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x66,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x22, 0x4d, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x49, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x41,
	0x0a, 0x06, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x22, 0x5c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x65,
	0x65, 0x74, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x45, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4d, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x1a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xa6, 0x08, 0x0a, 0x12, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x53, 0x68, 0x65, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x80,
	0x01, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x2e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x65, 0x65, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x65, 0x65, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x21, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x73, 0x68, 0x65, 0x65, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x3a, 0x01,
	0x2a, 0x12, 0xa0, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x6f, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x5f, 0x73, 0x68, 0x65, 0x65, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x65, 0x65, 0x74,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x73, 0x68, 0x65, 0x65, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x7b,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2d, 0x64,
	0x6f, 0x69, 0x6e, 0x67, 0x12, 0x77, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x12, 0x1f, 0x2e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x65, 0x65,
	0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x65,
	0x65, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x68, 0x65,
	0x65, 0x74, 0x73, 0x2f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x8f, 0x01,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x23, 0x2e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x65, 0x65, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x73,
	0x68, 0x65, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x73, 0x68, 0x65, 0x65, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x7b,
	0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x67, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x73,
	0x68, 0x65, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x65, 0x65, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x65, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x65, 0x65, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x68,
	0x65, 0x65, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x77,
	0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x65, 0x65, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x65, 0x65, 0x74, 0x2e, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x68, 0x65, 0x65, 0x74, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x67, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x27, 0x2e,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x65, 0x65, 0x74, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f,
	0x73, 0x68, 0x65, 0x65, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x68, 0x65, 0x65,
	0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_answer_sheet_proto_rawDescOnce sync.Once
	file_answer_sheet_proto_rawDescData = file_answer_sheet_proto_rawDesc
)

func file_answer_sheet_proto_rawDescGZIP() []byte {
	file_answer_sheet_proto_rawDescOnce.Do(func() {
		file_answer_sheet_proto_rawDescData = protoimpl.X.CompressGZIP(file_answer_sheet_proto_rawDescData)
	})
	return file_answer_sheet_proto_rawDescData
}

var file_answer_sheet_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_answer_sheet_proto_goTypes = []interface{}{
	(*Test)(nil),                       // 0: answer_sheet.Test
	(*StartDoTestRequest)(nil),         // 1: answer_sheet.StartDoTestRequest
	(*StartDoTestResponse)(nil),        // 2: answer_sheet.StartDoTestResponse
	(*CheckUserDoingTestRequest)(nil),  // 3: answer_sheet.CheckUserDoingTestRequest
	(*CheckUserDoingTestResponse)(nil), // 4: answer_sheet.CheckUserDoingTestResponse
	(*UserAnswerRequest)(nil),          // 5: answer_sheet.UserAnswerRequest
	(*UserAnswerResponse)(nil),         // 6: answer_sheet.UserAnswerResponse
	(*GetTestContentRequest)(nil),      // 7: answer_sheet.GetTestContentRequest
	(*GetTestContentResponse)(nil),     // 8: answer_sheet.GetTestContentResponse
	(*TestMultipleChoiceAnswer)(nil),   // 9: answer_sheet.TestMultipleChoiceAnswer
	(*TestMultipleChoice)(nil),         // 10: answer_sheet.TestMultipleChoice
	(*TestContent)(nil),                // 11: answer_sheet.TestContent
	(*GetLatestStartTimeRequest)(nil),  // 12: answer_sheet.GetLatestStartTimeRequest
	(*GetLatestStartTimeResponse)(nil), // 13: answer_sheet.GetLatestStartTimeResponse
	(*GetCurrentTestRequest)(nil),      // 14: answer_sheet.GetCurrentTestRequest
	(*Answer)(nil),                     // 15: answer_sheet.Answer
	(*GetCurrentTestResponse)(nil),     // 16: answer_sheet.GetCurrentTestResponse
	(*SubmitTestRequest)(nil),          // 17: answer_sheet.SubmitTestRequest
	(*SubmitTestResponse)(nil),         // 18: answer_sheet.SubmitTestResponse
	(*CheckUserSubmittedRequest)(nil),  // 19: answer_sheet.CheckUserSubmittedRequest
	(*CheckUserSubmittedResponse)(nil), // 20: answer_sheet.CheckUserSubmittedResponse
	(*timestamppb.Timestamp)(nil),      // 21: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),        // 22: google.protobuf.Duration
}
var file_answer_sheet_proto_depIdxs = []int32{
	21, // 0: answer_sheet.Test.time_start:type_name -> google.protobuf.Timestamp
	21, // 1: answer_sheet.Test.time_end:type_name -> google.protobuf.Timestamp
	21, // 2: answer_sheet.Test.created_at:type_name -> google.protobuf.Timestamp
	21, // 3: answer_sheet.Test.updated_at:type_name -> google.protobuf.Timestamp
	11, // 4: answer_sheet.GetTestContentResponse.data:type_name -> answer_sheet.TestContent
	9,  // 5: answer_sheet.TestMultipleChoice.answers:type_name -> answer_sheet.TestMultipleChoiceAnswer
	10, // 6: answer_sheet.TestContent.multiple_choice:type_name -> answer_sheet.TestMultipleChoice
	22, // 7: answer_sheet.TestContent.time_left:type_name -> google.protobuf.Duration
	21, // 8: answer_sheet.GetLatestStartTimeResponse.data:type_name -> google.protobuf.Timestamp
	15, // 9: answer_sheet.GetCurrentTestResponse.data:type_name -> answer_sheet.Answer
	1,  // 10: answer_sheet.AnswerSheetService.StartDoTest:input_type -> answer_sheet.StartDoTestRequest
	3,  // 11: answer_sheet.AnswerSheetService.CheckUserDoingTest:input_type -> answer_sheet.CheckUserDoingTestRequest
	5,  // 12: answer_sheet.AnswerSheetService.UserAnswer:input_type -> answer_sheet.UserAnswerRequest
	7,  // 13: answer_sheet.AnswerSheetService.GetTestContent:input_type -> answer_sheet.GetTestContentRequest
	12, // 14: answer_sheet.AnswerSheetService.GetLatestStartTime:input_type -> answer_sheet.GetLatestStartTimeRequest
	14, // 15: answer_sheet.AnswerSheetService.GetCurrentTest:input_type -> answer_sheet.GetCurrentTestRequest
	17, // 16: answer_sheet.AnswerSheetService.SubmitTest:input_type -> answer_sheet.SubmitTestRequest
	19, // 17: answer_sheet.AnswerSheetService.CheckUserSubmitted:input_type -> answer_sheet.CheckUserSubmittedRequest
	2,  // 18: answer_sheet.AnswerSheetService.StartDoTest:output_type -> answer_sheet.StartDoTestResponse
	4,  // 19: answer_sheet.AnswerSheetService.CheckUserDoingTest:output_type -> answer_sheet.CheckUserDoingTestResponse
	6,  // 20: answer_sheet.AnswerSheetService.UserAnswer:output_type -> answer_sheet.UserAnswerResponse
	8,  // 21: answer_sheet.AnswerSheetService.GetTestContent:output_type -> answer_sheet.GetTestContentResponse
	13, // 22: answer_sheet.AnswerSheetService.GetLatestStartTime:output_type -> answer_sheet.GetLatestStartTimeResponse
	16, // 23: answer_sheet.AnswerSheetService.GetCurrentTest:output_type -> answer_sheet.GetCurrentTestResponse
	18, // 24: answer_sheet.AnswerSheetService.SubmitTest:output_type -> answer_sheet.SubmitTestResponse
	20, // 25: answer_sheet.AnswerSheetService.CheckUserSubmitted:output_type -> answer_sheet.CheckUserSubmittedResponse
	18, // [18:26] is the sub-list for method output_type
	10, // [10:18] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_answer_sheet_proto_init() }
func file_answer_sheet_proto_init() {
	if File_answer_sheet_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_answer_sheet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Test); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_answer_sheet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartDoTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_answer_sheet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartDoTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_answer_sheet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserDoingTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_answer_sheet_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserDoingTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_answer_sheet_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAnswerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_answer_sheet_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAnswerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_answer_sheet_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestContentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_answer_sheet_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestContentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_answer_sheet_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestMultipleChoiceAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_answer_sheet_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestMultipleChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_answer_sheet_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_answer_sheet_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestStartTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_answer_sheet_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestStartTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_answer_sheet_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_answer_sheet_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Answer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_answer_sheet_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_answer_sheet_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_answer_sheet_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_answer_sheet_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserSubmittedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_answer_sheet_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserSubmittedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_answer_sheet_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_answer_sheet_proto_goTypes,
		DependencyIndexes: file_answer_sheet_proto_depIdxs,
		MessageInfos:      file_answer_sheet_proto_msgTypes,
	}.Build()
	File_answer_sheet_proto = out.File
	file_answer_sheet_proto_rawDesc = nil
	file_answer_sheet_proto_goTypes = nil
	file_answer_sheet_proto_depIdxs = nil
}
