syntax = "proto3";
package test;
option go_package = "./testpb";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

message CreateTestRequest{
  string name = 1;
  int32 time_to_do = 2;
  string time_start = 3;
  string time_end = 4;
  bool  do_once = 5;
  string password = 6;
  uint32 prevent_cheat = 7;
  bool is_authenticate_user = 8;
  uint32 show_mark = 9;
  uint32 show_answer = 10;
}

message Test {
  int64  id = 11;
  string name = 1;
  int32 time_to_do = 2;
  google.protobuf.Timestamp time_start = 3;
  google.protobuf.Timestamp time_end = 4;
  bool  do_once = 5;
  string password = 6;
  uint32 prevent_cheat = 7;
  bool is_authenticate_user = 8;
  uint32 show_mark = 9;
  uint32 show_answer = 10;
  int64 created_by = 12;
  google.protobuf.Timestamp created_at = 13;
  google.protobuf.Timestamp updated_at = 14;
}

message CreateTestResponse {
  string message = 1;
}

message MultipleChoiceAnswer {
  int64 test_multiple_choice_id = 1;
  string answer = 2;
  float score = 3;
  int32 type = 4;
}

message TestMultipleChoice {
  string file_path = 1;
  float score = 2;
  repeated MultipleChoiceAnswer answers = 3;
}

message CreateTestContentRequest {
  int64 test_id = 1;
  int64 typeable = 2;
  TestMultipleChoice multiple_choice = 3;
}

message CreateTestContentResponse {
  string message = 1;
}

message GetTestsRequest {

}

message GetTestResponse {
  repeated Test data = 1;
  string message = 2;
}

message GetTestPreviewRequest {
  string code = 1;
  int64 id = 2;
}

message TestPreview {
  int64  id = 11;
  string name = 1;
  int32 time_to_do = 2;
  google.protobuf.Timestamp time_start = 3;
  google.protobuf.Timestamp time_end = 4;
  bool  do_once = 5;
}
message GetTestPreviewResponse {
  string message = 1;
  TestPreview data = 2;
}

service TestService {
  rpc Create(CreateTestRequest) returns(CreateTestResponse){
    option(google.api.http) = {
      post: "/api/v1/tests",
      body: "*"
    };
  }
  rpc CreateContent(CreateTestContentRequest) returns(CreateTestContentResponse){
    option(google.api.http) = {
      post: "/api/v1/tests/content",
      body: "*"
    };
  }
  rpc Get(GetTestsRequest) returns(GetTestResponse) {
    option(google.api.http) = {
      get: "/api/v1/tests/own"
    };
  }
  rpc GetPreview(GetTestPreviewRequest) returns(GetTestPreviewResponse) {
    option(google.api.http) = {
      get: "/api/v1/tests/preview/{id}"
    };
  }

}